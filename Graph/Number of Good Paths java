There is a tree (i.e. a connected, undirected graph with no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges.

You are given a 0-indexed integer array vals of length n where vals[i] denotes the value of the ith node. You are also given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.

A good path is a simple path that satisfies the following conditions:

    The starting node and the ending node have the same value.
    All nodes between the starting node and the ending node have values less than or equal to the starting node (i.e. the starting node's value should be the maximum value along the path).

Return the number of distinct good paths.

Note that a path and its reverse are counted as the same path. For example, 0 -> 1 is considered to be the same as 1 -> 0. A single node is also considered as a valid path.

Leetcode - 2421

Input: vals = [1,3,2,1,3], edges = [[0,1],[0,2],[2,3],[2,4]]
Output: 6
Explanation: There are 5 good paths consisting of a single node.
There is 1 additional good path: 1 -> 0 -> 2 -> 4.
(The reverse path 4 -> 2 -> 0 -> 1 is treated as the same as 1 -> 0 -> 2 -> 4.)
Note that 0 -> 2 -> 3 is not a good path because vals[2] > vals[0].

Solution:-

Using DSU

class Solution {
    // parent - to keep track of parent of each node and count array to keep track of number of nodes in each set
    // count - to store the number of good paths
    int parent[], count[];
    int ans;
    public int numberOfGoodPaths(int[] vals, int[][] edges) {
        // sort edges based on the maximum value of the nodes in the edge
        Arrays.sort(edges, (e1, e2) -> Integer.compare(Math.max(vals[e1[0]], vals[e1[1]]), Math.max(vals[e2[0]], vals[e2[1]])));
        int n = vals.length;
        parent = new int[n];
        count = new int[n];
        // initialize number of good paths to be equal to number of nodes
        ans = n;
        // initialize count of nodes in each set to be 1
        Arrays.fill(count, 1);

        for(int i = 0;i < n; i++){
            parent[i] = i;
        }
        for(int edge[]: edges){
            union(edge[0], edge[1], vals);
        }
        return ans;
    }

    public void union( int u, int v, int[] vals){
        int paru = findPar(u);
        int parv = findPar(v);
        // if x and y are already in the same set, return
        if(paru == parv)
            return;
        
        if(vals[paru] == vals[parv]){
        // if the values of the parents of x and y are equal, update number of good paths
            ans += (count[paru] * count[parv]);
            count[paru] += count[parv];
            parent[parv] = paru;
        }else if(vals[paru] > vals[parv]){
            parent[parv] = paru;
        }else{
            parent[paru] = parv;
        }
    }

    public int findPar(int u){
        if(parent[u] == u){
            return u;
        }
        return parent[u] = findPar(parent[u]);
    }
}
