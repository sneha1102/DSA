Bellman-Ford Algorithm â€“ Shortest Distance from the given src with Negative Edge.

Directed graph - works for + ve and -ve edges.
Undirected graph - In order to use bellman, convert it to directed graph. (works for +ve edges)

In case of -ve cycle in the graph, it didn't work.

Bellman fors algorithm is used to detect -ve cycle in the cycle.
Bellman algo say that after n-1 relaxation of every edges, dist array will contain shortest distance from src node. 
And after that if we do one more time relaxation, and if dist reduces then => -ve cycle exists in the graph.

Code:-

class Node 
{
	  private int u;
    private int v;
    private int weight;
    
    Node(int _u, int _v, int _w) 
     { 
        u = _u; 
        v = _v; 
        weight = _w; 
    }
    
    Node() {}
    
    int getV() 
      { return v; }
    int getU() 
      { return u; }
    int getWeight()   
      { return weight; }

}
 

class Main
{
    void bellmanFord(ArrayList<Node> edges, int N, int src)
    {
        int dist[] = new int[N];
        for(int i = 0;i < N; i++) 
          dist[i] = 10000000; 

        dist[src] = 0;

    	for(int i = 1; i <= N - 1; i++) {
    		for(Node node : edges) {
    			if(dist[node.getU()] + node.getWeight() < dist[node.getV()]) {
    				dist[node.getV()] = dist[node.getU()] + node.getWeight(); 
    			}
    		}
    	}

    	int fl = 0; // flag to check whether -ve cycle exists or not
    	for(Node node: edges) {
    		if(dist[node.getU()] + node.getWeight() < dist[node.getV()]) {
        // -ve cycle exists
    			fl = 1;
    			System.out.println("Negative Cycle"); 
    			break;
    		}
    	}
// -ve cycle doesn't exists
    	if(fl == 0) {
    		for(int i = 0;i<N;i++) {
    			System.out.print(  dist[i]+" "); 
    		}
    	}
    }
    public static void main(String args[])
    {
        int n = 6;
        ArrayList<Node> adj = new ArrayList<Node>();
		
			
		adj.add(new Node(3, 2, 6));
		adj.add(new Node(5, 3, 1));
		adj.add(new Node(0, 1, 5));
		adj.add(new Node(1, 5, -3));
		adj.add(new Node(1, 2, -2));
		adj.add(new Node(3, 4, -2));
		adj.add(new Node(2, 4, 3));

	
		Main obj = new Main(); 
		obj.bellmanFord(adj, n, 0);
		
    }
}

TC - O(N * E), as we check E edges N times

SC - O(N), Distance Array


