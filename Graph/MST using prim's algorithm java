Given a weighted, undirected, and connected graph of V vertices and E edges. The task is to find the sum of weights of the edges of the Minimum Spanning Tree.

MST(Minimum spanning tree) :- A minimum spanning tree consists of N nodes and N-1 edges connecting all the nodes which have the minimum cost(sum of edge weights).

Solution:-
Approach - 1: Brute force

class Node 
{
    private int v;
    private int weight;
    
    Node(int _v, int _w) 
    {
    v = _v; 
    weight = _w; 
    }
    
    Node() {}
    
    int getV() 
      { return v; }
    int getWeight() 
      { return weight; }
}

class Main
{
    void primsAlgo(ArrayList<ArrayList<Node>> adj, int N)
    {
        int key[] = new int[N];
        int parent[] = new int[N]; 
        boolean mstSet[] = new boolean[N]; 
        for(int i = 0; i < N; i++) {
        	key[i] = 100000000; 
        	mstSet[i] = false; 
        }
        // take first node as MST
        key[0] = 0;
        parent[0] = -1; 
        
      // Spanning tree of N node can have N - 1 edges so we are running loop till N - 1
        for(int i = 0; i < N - 1; i++) {
        	int mini = 100000000, u = 0; 
          //  find the one with minimum weight in the key array that is not a part of the MST
          // this is where we ensure that we pickup the node with minimum weight and we do not choose an edge that might cause a cycle
        	for(int v = 0; v < N; v++) {
          // out of all adjacent edges pickup the the one with minimum weight.
        		if(mstSet[v] == false && key[v] < mini) {
        			mini = key[v]; 
        			u = v; 
        		}
        	}
      // mark this node as true indicating that it is now a part of the MST
        	mstSet[u] = true;
     
        // find all its adjacent edges and update the key and parent array
        	for(Node it: adj.get(u)) {
        		if(mstSet[it.getV()] == false && it.getWeight() < key[it.getV()]) {
        			parent[it.getV()] = u; 
        			key[it.getV()] = it.getWeight(); 
        		}
        	}
        }

        for(int i = 1; i < N; i++) {
        	System.out.println(parent[i] + " - " + i); 
        }
    }
    public static void main(String args[])
    {
        int n = 5;
        ArrayList<ArrayList<Node> > adj = new ArrayList<ArrayList<Node> >();
		
		for (int i = 0; i < n; i++) 
			adj.add(new ArrayList<Node>());
			
		adj.get(0).add(new Node(1, 2));
		adj.get(1).add(new Node(0, 2));
		
		adj.get(1).add(new Node(2, 3));
		adj.get(2).add(new Node(1, 3));
		
		adj.get(0).add(new Node(3, 6));
		adj.get(3).add(new Node(0, 6));
		
		adj.get(1).add(new Node(3, 8));
		adj.get(3).add(new Node(1, 8));
		
		adj.get(1).add(new Node(4, 5));
		adj.get(4).add(new Node(1, 5));
		
		adj.get(2).add(new Node(4, 7));
		adj.get(4).add(new Node(2, 7));
		
		Main obj = new Main(); 
		obj.primsAlgo(adj, n); 
		
    }
}

TC :- O(N^2). Going through N Node for N-1 times
SC :- O(N). 3 arrays of size N

Approach - 2 :- Using priority queue(min heap)
We will use a minimum heap to facilitate this task. Min-heap will contain the weight required to reach a node along with its index

class Node implements Comparator < Node > {
    private int v;
    private int weight;

    Node(int _v, int _w) {
        v = _v;
        weight = _w;
    }

    Node() {}

    int getV() {
        return v;
    }
    int getWeight() {
        return weight;
    }

    @Override
    public int compare(Node node1, Node node2) {
        if (node1.weight < node2.weight)
            return -1;
        if (node1.weight > node2.weight)
            return 1;
        return 0;
    }
}

class Main {
    void primsAlgo(ArrayList < ArrayList < Node >> adj, int N) {
        int key[] = new int[N];
        int parent[] = new int[N];
        boolean mstSet[] = new boolean[N];
        for (int i = 0; i < N; i++) {
            key[i] = 100000000;
            mstSet[i] = false;
        }

        PriorityQueue < Node > pq = new PriorityQueue < Node > (N, new Node());// minimum one at the top

        key[0] = 0;
        parent[0] = -1;
        pq.add(new Node(key[0], 0));
        
        // Run the loop till all the nodes have been visited
        // because in the brute code we checked for mstSet[node] == false while computing the minimum
        // but here we simply take the minimal from the priority queue, so a lot of times a node might be taken twice
        // hence its better to keep running till all the nodes have been taken.  
        while (!pq.isEmpty()) {
        // get the minimum one
            int u = pq.poll().getV();
            mstSet[u] = true;

            for (Node it: adj.get(u)) {
                if (mstSet[it.getV()] == false && it.getWeight() < key[it.getV()]) {
                    parent[it.getV()] = u;
                    key[it.getV()] = it.getWeight();
                    pq.add(new Node(it.getV(), key[it.getV()]));
                }
            }
        }

        for (int i = 1; i < N; i++) {
            System.out.println(parent[i] + " - " + i);
        }
    }
    public static void main(String args[]) {
        int n = 5;
        ArrayList < ArrayList < Node > > adj = new ArrayList < ArrayList < Node > > ();

        for (int i = 0; i < n; i++)
            adj.add(new ArrayList < Node > ());

        adj.get(0).add(new Node(1, 2));
        adj.get(1).add(new Node(0, 2));

        adj.get(1).add(new Node(2, 3));
        adj.get(2).add(new Node(1, 3));

        adj.get(0).add(new Node(3, 6));
        adj.get(3).add(new Node(0, 6));

        adj.get(1).add(new Node(3, 8));
        adj.get(3).add(new Node(1, 8));

        adj.get(1).add(new Node(4, 5));
        adj.get(4).add(new Node(1, 5));

        adj.get(2).add(new Node(4, 7));
        adj.get(4).add(new Node(2, 7));

        Main obj = new Main();
        obj.primsAlgo(adj, n);

    }
}

TC :- O(NlogN). N iterations and logN for priority queue
SC :- O(N). Three arrays and priority queue
