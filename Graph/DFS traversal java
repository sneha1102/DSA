Approach:-
    Start with a random node from graph
    Make an array to keep track of visited nodes, once visited make that node as visited
    Print this current node
    Get  neighbour nodes and perform above steps recursively for each node deeply/depthly if node is unvisited.

Code:-

import java.util.*;
class Solution
{
    public static void dfs(int node, boolean vis[], ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> storeDfs) {
        storeDfs.add(node);
        vis[node] = true;
        for(Integer it: adj.get(node)) {
            if(vis[it] == false) {
                dfs(it, vis, adj, storeDfs);
            }
        }
    }
    public static ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj)
    {
        ArrayList<Integer> storeDfs = new ArrayList<>();

        //boolean array to keep track of visited vertices
        boolean vis[] = new boolean[V+1];

        //If you are starting from node 2, then i should start from 2.
        for(int i = 1;i <= V; i++) {
            if(!vis[i]) 
              dfs(i, vis, adj, storeDfs);
        }

        return storeDfs;
    }
    static void printAns(ArrayList < Integer > ans) {
        for (int i = 0; i < ans.size(); i++) {
            System.out.print(ans.get(i) + " ");
        }
    }
    public static void main(String args[]) {

        ArrayList < ArrayList < Integer >> adj = new ArrayList < > ();

        for (int i = 0; i < 6; i++) {
            adj.add(new ArrayList < > ());
        }

        adj.get(1).add(2);
        adj.get(1).add(3);
        adj.get(1).add(4);
        adj.get(1).add(5);
        adj.get(2).add(4);
        adj.get(2).add(1);
        adj.get(3).add(1);
        adj.get(4).add(1);
        adj.get(4).add(2);
        adj.get(5).add(1);


        ArrayList < Integer > ans = dfsOfGraph(5, adj);
        printAns(ans);
    }
}

TC :- O(N+E), Where N is the time taken for visiting N nodes and E is for travelling through adjacent nodes.

SC :- O(N+E)+O(N)+O(N)
Space for adjacency list, Array,Auxiliary space.
