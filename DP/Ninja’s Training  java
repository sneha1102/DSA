Ninjaâ€™s Training 

https://www.codingninjas.com/codestudio/problems/ninja-s-training_3621003?leftPanelTab=0

Solution:-

import java.util.*;

public class Solution {
    /*
    //Recursion
    public static int ninjaTraining(int n, int points[][]) {
        
        return solve(n - 1, 3, points);
    }
    
    private static int solve(int day, int last, int points[][]){
        if(day == 0){
            int m = Integer.MIN_VALUE;
            for(int i = 0; i < 3; i++){
                if(i != last){
                    m = Math.max(m, points[0][i]);
                }  
            }  
            return m;
        }
        int m = Integer.MIN_VALUE;
        for(int i = 0; i < 3; i++){
            if(i != last){
                int point = points[day][i] + solve(day - 1, i, points);
                m = Math.max(m, point);
                }  
            }  
            return m;
    }
*/
    /*
    // dp top down i.e memoization
    public static int ninjaTraining(int n, int points[][]) {
        int dp[][] = new int[n][4];
        for (int[] row: dp) {
            Arrays.fill(row, -1);
        }
        return solve(n - 1, 3, points, dp);
    }
    
    private static int solve(int day, int last, int points[][], int dp[][]){
        
        if(dp[day][last] != -1)
            return dp[day][last];
        
        if(day == 0){
            int m = Integer.MIN_VALUE;
            for(int i = 0; i < 3; i++){
                if(i != last){
                    m = Math.max(m, points[0][i]);
                }  
            }  
            return m;
        }
        
        int m = Integer.MIN_VALUE;
        for(int i = 0; i < 3; i++){
            if(i != last){
                int point = points[day][i] + solve(day - 1, i, points, dp);
                m = Math.max(m, point);
                }  
            }  
            return dp[day][last] = m;
    }
*/
    /*
    // tabulation i.e bottom up
      public static int ninjaTraining(int n, int points[][]) {
        
        return solve(n, points);
    }
    
    private static int solve(int n, int points[][]){  
        // base condn
        int[][] dp = new int[n][4];
        dp[0][0] = Math.max(points[0][1], points[0][2]);
        dp[0][1] = Math.max(points[0][0], points[0][2]);
        dp[0][2] = Math.max(points[0][0], points[0][1]);
        dp[0][3] = Math.max(points[0][0], Math.max(points[0][1], points[0][2]));

        for (int day = 1; day < n; day++) {
            for (int last = 0; last < 4; last++) {
                dp[day][last] = 0;
                for (int task = 0; task <= 2; task++) {
                    if (task != last) {
                        int activity = points[day][task] + dp[day - 1][task];
                        dp[day][last] = Math.max(dp[day][last], activity);
                    }
                }
            }

        }

        return dp[n - 1][3];
    }*/
    
    //dp space optimization i.e bottom up
    public static int ninjaTraining(int n, int points[][]) {
        
        return solve(n, points);
    }
    
    private static int solve(int n, int points[][]){  
        // base condn
        int prev[] = new int[4];

        prev[0] = Math.max(points[0][1], points[0][2]);
        prev[1] = Math.max(points[0][0], points[0][2]);
        prev[2] = Math.max(points[0][0], points[0][1]);
        prev[3] = Math.max(points[0][0], Math.max(points[0][1], points[0][2]));

        for (int day = 1; day < n; day++) {

            int temp[] = new int[4];
            for (int last = 0; last < 4; last++) {
                temp[last] = 0;
                for (int task = 0; task <= 2; task++) {
                    if (task != last) {
                        temp[last] = Math.max(temp[last], points[day][task] + prev[task]);
                    }
                }
            }

            prev = temp;

        }

        return prev[3];
    }
    
}
