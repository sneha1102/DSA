Question:-
The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,

F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.

Given n, calculate F(n).

Solution:-

class Solution {
    /*
    // recursion
    public int fib(int n) {
        return solve(n);
    }
    private int solve(int n){
        if( n <= 1)
            return n;
        return solve(n - 1) + solve(n - 2);
    }
    */
    /*
    // memoization
    // tc - O(N), SC - O(N) + O(N) - recursive call + dp array
    public int fib(int n) {
        int dp[] = new int[n + 1];
        Arrays.fill(dp, -1);
        return solve(n, dp);
    }
    private int solve(int n, int[] dp){
        if( n <= 1)
            return n;
        if(dp[n] != -1)
            return dp[n];
        return dp[n] = solve(n - 1, dp) + solve(n - 2, dp);
    }
    */
    /*
    // tabulation
    // TC - O(N), SC - O(N) - recursion space only
    public int fib(int n) {
        int dp[] = new int[n + 1];
        return solve(n, dp);
    }
    private int solve(int n, int[] dp){
        dp[0] = 0;
        dp[1] = 1;
        
        for(int i = 2; i <= n; i++){
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        
        return dp[n];
    }
    */
    // tabulation with space optimization
    // TC - O(N), SC - O(1)
    public int fib(int n) {
        return solve(n);
    }
    
    private int solve(int n){
        if(n == 0)
            return 0;
        int prevToPrev = 0;
        int prev = 1;
        int curr = -1;
        for(int i = 2; i <= n; i++){
            curr = prev + prevToPrev;
            prevToPrev = prev;
            prev = curr;
        }
        
        return prev;
    }
}
