Question:-

Given an integer array nums that may contain duplicates, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

Example 2:

Input: nums = [0]
Output: [[],[0]]


Solution:-

public class Main {
    public void subsetSum2(int ind, List<List<Integer>> res, List<Integer> ds, int[] nums){
        res.add(new ArrayList<>(ds));
        
        // create subset of all possible size i.e o, 1, 2, ...
        for(int i = ind; i < nums.length; i++){
            // if current index is not the first index of that specific size 
            // and if current element is equal to prev one, skip that element as we have avoid taking duplicates
            if(i != ind && nums[i] == nums[i - 1]){
                continue;
            }
            // add element in ds
            ds.add(nums[i]);
            subsetSum2(i + 1, res, ds, nums);
            //remove element after recursion call
            ds.remove(ds.size() - 1);
        }
    }
    public static void main(String[] args) {
        int[] arr = new int[]{1, 2, 2};
        Arrays.sort(arr);
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> ds = new ArrayList<>();
        Main m = new Main();
        m.subsetSum2(0, res, ds, arr);
        
        System.out.println(res.toString());
    }
}

TC - O(2 ^ N * N), 2 ^ N for recursion call and N for copying subset in ds
SC - O(2 ^ N * K), k -> 2^N subsets, avg lenegth of subset
